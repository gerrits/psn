                                toxic

toxic is meant to be an extremely reliable instant messaging service.

toxic is based on Mosquitto, an MQTT broker and client library.

A full functioning system consinsts of:
        -An MQTT broker (mosquitto) with MySQL User auth enabled
        -(a registration handler) not implemented yet
        -The toxic client

==USAGE DESCRIPTION==
First Run:

When a new user has downloaded, installed, and first started toxic he is confronted with a login screen in which he enters his toxic credentials.
If the user is not yet registered he can register to toxic by choosing the register function and entering a new username and password.

Once Logged in, the user can:
        - Send messages to friended users
        - Send friend requests to users
        - Accept or decline pending friend requests (if any)
        - Start group chats
        (- Accept or decline pending group chat requests)

If a friend sends a message the user will be notified in real time and is able to reply (the exact process is implementation dependant)

The proof of concept cli client is used as follows:

$>./toxic <username> <password>

Command                         | Description
msg <user> <message>            | Send  a message to <user>
add <user> <message>            | Make friend request with invite message
accept <user>                   | Accept <user>'s friend request
decline <user>                  | Decline <user>'s friend request

==PROTOCOL SPECIFICATION==
--MQTT Topic specs
Topic                            | Description         
users/<target>/frequest/<source> | topic for <target> to receive friend requests
chat/<source>/<target>           | topic for <source> to send a message to <target>
chat/<target>/<source>           | topic for <target> to send a message to <source>

NOTE: Wildcards:
 +: One Topic
 #: All following topics

-static acl:
Topic                          | Access
users/<username>/#             | read
users/+/frequest/<username>    | write
chat/<username>/#              | write
chat/+/<username>              | read

NOTE: Right now, the persistence of the friend list is entirely handled by the client.

--Example:
Peter wants to communicate to Bob via toxic.
Peter and Bobs clients are both connected to the toxic MQTT broker,
each client has subscribed their topics:
Peter:  users/Peter/#
Bob:    users/Bob/#

Peter sends a friend request to Bob by sending an invite message to
        users/Bob/frequest/Peter
and subscribes to the topic
        chat/Bob/Peter
Bob receives this message and accepts the request by also subscribing to
        chat/Peter/Bob
and sending an ack message to 
        users/Peter/Bob

Peter now sends his initial message to Bob, his client sends the message to 
        chat/Peter/Bob

Bob only receives this message if he subscribed (eg friended Peter) to
        chat/Peter/Bob

Bob can do this because the acls allow him to subscribe to the topics
        chat/+/Bob

Bobs client receives the message. From now on his client will send all Replies to
        chat/Bob/Peter